<#@ template language="C#" debug="True" #>
<#@ output extension="cs" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ Assembly name="$(SolutionDir)Point.com.Library\Point.com.Model.dll" #>
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\Point.com.Template4\DataModel.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>
using System.Collections.Generic;
using Point.com.IRepository;
using Point.com.Model;
using System;

namespace Point.com.Repository
{
   
<#
// Emit Entity Types

foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    //fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");
    //BeginNamespace(namespaceName, code);
	/*string tableName=string.Format("[{0}]",entity.Name.Replace("Mkt_","Mkt.").Replace("PromEngine_","PromEngine."));*/    
#>	
public partial class <#=entity.Name#>Repository : BaseRepository<<#=entity.Name#>>, I<#=entity.Name#>Repository
{
		public <#=entity.Name#>Repository(IUnitOfWork unitOfWork)
        : base(unitOfWork)
		{
			_tableName="<#=entity.Name#>";
		} 
		public <#=entity.Name#>Repository(IUnitOfWork unitOfWork,string tableName)
        : base(unitOfWork)
		{
			_tableName=tableName;
		}  
		private string _tableName;
	<#
	Assembly assembly =Assembly.GetAssembly(typeof(Point.com.Model.ModelBase));
	var types = assembly.GetTypes();//("T_AR_Order");#>

	protected override string GetSqlFromModel(<#=entity.Name#> model,Func<string,string,string> addFunc,Func<string,string> joinFunc)
	{
		if(null==model)
		{
			return string.Empty;
		}
		List<string> list=new List<string>();
		<#foreach (var type in types)
		{
			if (type.Name == entity.Name)
			{
				var ps = type.GetProperties();
				foreach (PropertyInfo propertyInfo in ps)
				{
					var name = propertyInfo.Name; 
					if(name.ToLower()==("SysNo".ToLower().Trim())){#>
		if(model.<#=propertyInfo.Name#>!=null && (long)model.<#=propertyInfo.Name#>!=0) 
		{
			list.Add(addFunc("<#=propertyInfo.Name#>",model.<#=propertyInfo.Name#>.ToString()));
		}	
						<#continue;}#>
		if(model.<#=propertyInfo.Name#>!=null) 
		{
			list.Add(addFunc("<#=propertyInfo.Name#>",model.<#=propertyInfo.Name#>.ToString()));
		}

				<#}
			}
		}#>	
		return string.Join(joinFunc(string.Empty),list.ToArray());
	}

	protected override string GetWhereSqlFromModel(<#=entity.Name#> model,Func<string,string> joinFunc,Func<string,string> addFunc=null)
	{
		if(null==model)
		{
			return string.Empty;
		}
		if(addFunc==null)
		{
			addFunc=(s)=>s;
		}
		List<string> list=new List<string>();
		<#foreach (var type in types)
		{
			if (type.Name == entity.Name)
			{
				var ps = type.GetProperties();
				foreach (PropertyInfo propertyInfo in ps)
				{
					var name = propertyInfo.Name; 
					if(name.ToLower()==("SysNo".ToLower().Trim()))
					{#>
		if(model.<#=propertyInfo.Name#>!=null && (long)model.<#=propertyInfo.Name#>!=0) 
		{
			list.Add(string.Format("{1}={0}",model.<#=propertyInfo.Name#>.ToString(),addFunc("[<#=propertyInfo.Name#>]")));
		}
					<#}
					else if(propertyInfo.Name.StartsWith("Not"))
					{#>
		if(model.<#=propertyInfo.Name#>!=null) 
		{
			list.Add(string.Format("{1}!={0}",model.<#=propertyInfo.Name#>.ToString(),addFunc("[<#=propertyInfo.Name.Substring(3)#>]")));			
		}	
					<#}
					else if(propertyInfo.Name.EndsWith("Start"))
					{#>
		if(model.<#=propertyInfo.Name#>!=null) 
		{
			list.Add(string.Format("{1}>='{0}'",model.<#=propertyInfo.Name#>.ToString(),addFunc("[<#=propertyInfo.Name.Substring(0,propertyInfo.Name.Length-5)#>]")));			
		}				
					<#}
					else if(propertyInfo.Name.EndsWith("End"))
					{#>
		if(model.<#=propertyInfo.Name#>!=null) 
		{	
			<#
				if (type.GetProperty(propertyInfo.Name,BindingFlags.IgnoreCase|BindingFlags.Instance|BindingFlags.Public).PropertyType.FullName.Contains("DateTime"))
			{#>
				if(((DateTime)model.<#=propertyInfo.Name#>).TimeOfDay.TotalSeconds>0)
				{
				list.Add(string.Format("{1}<='{0}'",model.<#=propertyInfo.Name#>.ToString(),addFunc("[<#=propertyInfo.Name.Substring(0,propertyInfo.Name.Length-3)#>]")));														
				}
				else
				{
				list.Add(string.Format("{1}<'{0}'",((DateTime)model.<#=propertyInfo.Name#>).AddDays(1).ToString(),addFunc("[<#=propertyInfo.Name.Substring(0,propertyInfo.Name.Length-3)#>]")));										
				}
				<#}
				else
				{#>
				list.Add(string.Format("{1}<='{0}'",model.<#=propertyInfo.Name#>.ToString(),addFunc("[<#=propertyInfo.Name.Substring(0,propertyInfo.Name.Length-3)#>]")));										
			<#}#>
		}				
			<#}
			else if(propertyInfo.Name.EndsWith("Csv"))
			{#>
		if(model.<#=propertyInfo.Name#>!=null) 
		{
			<#
				if (type.GetProperty(propertyInfo.Name.Replace("Csv",""),BindingFlags.IgnoreCase|BindingFlags.Instance|BindingFlags.Public).PropertyType.FullName.Contains("String"))
				{
				string propertyInfoName=propertyInfo.Name.Substring(0,propertyInfo.Name.Length-3);#>
					if (!model.<#=propertyInfoName#>Csv.Contains("'"))
					{
						string <#=propertyInfoName#>Csv = model.<#=propertyInfoName#>Csv;
						var <#=propertyInfoName#>s =
						<#=propertyInfoName#>Csv.Replace(";", ",").Replace("；", ",").Replace("，", ",").Split(',');
						var <#=propertyInfoName#>Lst = new List<string>();
						foreach (string <#=propertyInfoName#> in <#=propertyInfoName#>s)
						{
							if (!string.IsNullOrEmpty(<#=propertyInfoName#>))
							{
								<#=propertyInfoName#>Lst.Add(string.Format("'{0}'",<#=propertyInfoName#>));
							}
						}					
					model.<#=propertyInfoName#>Csv = string.Join(",", <#=propertyInfoName#>Lst.ToArray());
					}
				<#}#>
				list.Add(string.Format("{1} in ({0})",model.<#=propertyInfo.Name#>.ToString(),addFunc("[<#=propertyInfo.Name.Substring(0,propertyInfo.Name.Length-3)#>]")));									
		}
					<#}
					else
					{#>
		if(model.<#=propertyInfo.Name#>!=null) 
		{
			list.Add(string.Format("{1}='{0}'",model.<#=propertyInfo.Name#>.ToString(),addFunc("[<#=propertyInfo.Name#>]")));
		}
					<#}#>


				<#}
			}
		}#>	
		return string.Join(joinFunc(string.Empty),list.ToArray());
	}

public override string PersistNewItem(params ModelBase[] item)
{
	var data=(<#=entity.Name#>)item[0];
string sql = string.Format("insert into {2}({0}) values({1})",
                                this.GetSqlFromModel(data,(name,value)=>string.Format("[{0}]",name),s=>","),
								this.GetSqlFromModel(data,(name,value)=>string.Format("'{0}'",value),s=>","),_tableName);
    return sql;
}

public override string PersistUpdatedItem(params ModelBase[] item)
{
	var data=(<#=entity.Name#>)item[0];		
	var where=	(<#=entity.Name#>)item[1];
string sql = string.Format("update {2} set {0} where {1}",  
						this.GetSqlFromModel(data,(name,value)=>string.Format("[{0}]='{1}'",name,value),s=>","),
						this.GetWhereSqlFromModel(where,s=>" and "),_tableName);
    return sql;
}      

protected override string QueryBySql(<#=entity.Name#> where = null, string order = null)
{
	string whereStr = string.Empty;
	if (null != where)
	{
		string whereSql = this.GetWhereSqlFromModel(where, s => " and ");
		if (!string.IsNullOrEmpty(whereSql))
		{
			whereStr = string.Format("where {0}", whereSql);
		}
	}
    string sql = string.Format("select * from {2} {0} {1}", whereStr, order,_tableName);
    return sql;
}

protected override string QueryPageBySql(int pageIndex = 1, int pageSize = 20, <#=entity.Name#> where = null, string order = null)
{
    string whereStr = string.Empty;
    if (null != where)
    {
        whereStr =this.GetWhereSqlFromModel(where, s => " and ");
    }
    string sql =
        string.Format(
            @"SELECT  t.*
			FROM    ( SELECT    * ,
								ROW_NUMBER() OVER ({0}) AS Rn
					  FROM {4} {1}
					) AS t
			WHERE   t.Rn BETWEEN {2} AND {3}",
            string.IsNullOrEmpty(order)?"ORDER BY GETDATE()":order,
            (string.IsNullOrEmpty(whereStr) ? string.Empty : string.Format("where {0}", whereStr)),
			(pageIndex-1)*pageSize+1,
			pageSize*pageIndex,_tableName);

    return sql;
}

        /// <summary>
        /// 查询总条数
        /// </summary>
        /// <param name="where"></param>
        /// <returns></returns>
        protected override string QueryCountBySql(<#=entity.Name#> where = null)
        {
            //TODO:Where不能为空

            string whereStr = string.Empty;
            if (null != where)
            {
                string whereSql = this.GetWhereSqlFromModel(where, s => " and ");
                if (!string.IsNullOrEmpty(whereSql))
                {
                    whereStr = string.Format("where {0}", whereSql);
                }
            }
            string sql = string.Format("select count(1) from {1} {0} ", whereStr,_tableName);
            return sql;
        }

        /// <summary>
        /// 查询指定列的数据之和
        /// </summary>
        /// <param name="columnName"></param>
        /// <param name="where"></param>
        /// <returns></returns>
        protected override string QuerySumBySql(string columnName, <#=entity.Name#> where = null)
        {
            if (string.IsNullOrEmpty(columnName))
            {
                throw new ArgumentNullException(string.Format("查询指定列数据汇总失败，失败详情：指定列名不能为空"));

            }
            string whereStr = string.Empty;
            if (null != where)
            {
                string whereSql = this.GetWhereSqlFromModel(where, s => " and ");
                if (!string.IsNullOrEmpty(whereSql))
                {
                    whereStr = string.Format("where {0}", whereSql);
                }
            }
            string sql = string.Format("select SUM({1}) from {2} {0} ", whereStr, columnName,_tableName);
            return sql;
        }

        /// <summary>
        /// 查询top条数据
        /// </summary>
        /// <param name="top"></param>
        /// <param name="where"></param>
        /// <param name="order"></param>
        /// <returns></returns>
        protected override string QueryTopBySql(int? top, <#=entity.Name#> where = null, string order = null)
        {
            if (null == top)
            {
                throw new ArgumentNullException(string.Format("查询指定TOP数据失败，失败详情：TOP不能为空"));
            }
            string whereStr = string.Empty;
            if (null != where)
            {
                string whereSql = this.GetWhereSqlFromModel(where, s => " and ");
                if (!string.IsNullOrEmpty(whereSql))
                {
                    whereStr = string.Format("where {0}", whereSql);
                }
            }
            string sql = string.Format("select top ({2}) * from {3} {0} {1}", whereStr, order,
                                       Math.Abs((int)top),_tableName);

            return sql;
        }


public override void AddDataTable(System.Data.DataTable dataTable)
        {
            base.AddDataTable(dataTable,_tableName);
        }

}
<#}#>
	
}